{"version":3,"sources":["utils.ts","App.tsx","index.tsx"],"names":["headerCellsNames","getRandomName","array","Math","round","random","length","useStyles","makeStyles","app","fontFamily","textAlign","height","boxSizing","paper","maxWidth","padding","tableContainer","overflow","container","width","bodyContainer","cell","border","CustomCell","props","TableCell","style","colSpan","colspan","rowSpan","touchHeaderBottom","stringValue","TableHeader","memo","selfRef","bodyRef","headerData","handleScroll","classes","TableContainer","className","ref","onScroll","e","Table","TableHead","map","row","rowIndex","TableRow","id","App","useMemo","colNum","Array","from","i","push","concat","fill","bottomCellsNumber","rowLength","uuid","getHeaderData","headerRef","useRef","containerRef","useState","cellsWidth","useCallback","event","scrollRecipient","current","scrollTo","left","currentTarget","scrollLeft","columnVirtualizer","useVirtual","horizontal","size","estimateSize","parentRef","Paper","_","position","totalSize","virtualItems","virtualColumn","measureRef","top","minWidth","transform","start","index","rootElement","document","getElementById","setAttribute","render"],"mappings":"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","file":"static/js/main.c56b69ba.chunk.js","sourcesContent":["import { v4 as uuid } from \"uuid\";\r\nimport { HeaderCell, UnicHeaderCell } from \"./models\";\r\n\r\nconst headerCellsNames = [\r\n  \"заголовок\",\r\n  \"название\",\r\n  \"ячейка\",\r\n  \"месторождение\",\r\n  \"хэдер\",\r\n  \"колонка\"\r\n];\r\n\r\nconst getRandomName = (array: string[]) =>\r\n  array[Math.round(Math.random() * (array.length - 1))];\r\n\r\nexport const getHdeaderData = (\r\n  columnLength: number,\r\n  maxMergedСells: number = 16\r\n) => {\r\n  if (columnLength < maxMergedСells) {\r\n    return [];\r\n  }\r\n\r\n  const rowLength = 4;\r\n  let headerData: HeaderCell[][] = Array.from({ length: rowLength }, () => []);\r\n  let remainingColumns = columnLength;\r\n\r\n  while (remainingColumns > 0) {\r\n    let remainingRows = rowLength;\r\n    const vertCellsNumber = Math.ceil(Math.random() * rowLength);\r\n    let horCellsNumber = Math.ceil(Math.random() * maxMergedСells);\r\n\r\n    if (horCellsNumber > remainingColumns) {\r\n      horCellsNumber = remainingColumns;\r\n    }\r\n    console.log(horCellsNumber);\r\n\r\n    for (let i = vertCellsNumber - 1; i >= 0; i--) {\r\n      if (i === vertCellsNumber - 1) {\r\n        headerData[i].push(\r\n          ...Array.from({ length: horCellsNumber }, () => ({\r\n            stringValue: getRandomName(headerCellsNames),\r\n            rowSpan: rowLength - i\r\n          }))\r\n        );\r\n      } else {\r\n      }\r\n      remainingColumns -= vertCellsNumber;\r\n      console.log(remainingColumns);\r\n    }\r\n    return headerData;\r\n  }\r\n};\r\n\r\nexport const getHeaderData = (colNum: number) => {\r\n  const rowLength = 4;\r\n  let headerData: UnicHeaderCell[][] = Array.from({ length: rowLength }, () => []);\r\n  let i = 0;\r\n  while (i < colNum) {\r\n    if (i % 5 === 0) {\r\n      headerData[0].push({\r\n        stringValue: getRandomName(headerCellsNames),\r\n        colspan: 8,\r\n        rowSpan: 4\r\n      });\r\n    } else if (i % 3 === 0) {\r\n      headerData[0].push({\r\n        stringValue: getRandomName(headerCellsNames),\r\n        colspan: 8\r\n      });\r\n      headerData[1] = headerData[1].concat(\r\n        new Array(2).fill({\r\n          stringValue: getRandomName(headerCellsNames),\r\n          colspan: 4\r\n        })\r\n      );\r\n      headerData[2] = headerData[2].concat(\r\n        new Array(4).fill({\r\n          stringValue: getRandomName(headerCellsNames),\r\n          colspan: 2\r\n        })\r\n      );\r\n      headerData[3] = headerData[3].concat(\r\n        new Array(8).fill({\r\n          stringValue: getRandomName(headerCellsNames)\r\n        })\r\n      );\r\n    } else if (i % 2 === 0) {\r\n      headerData[0].push({\r\n        stringValue: getRandomName(headerCellsNames),\r\n        colspan: 8,\r\n        rowSpan: 2\r\n      });\r\n      headerData[2] = headerData[2].concat(\r\n        new Array(8).fill({\r\n          stringValue: getRandomName(headerCellsNames),\r\n          rowSpan: 2\r\n        })\r\n      );\r\n    }\r\n    headerData[0] = headerData[0].concat(\r\n      new Array(8).fill({\r\n        stringValue: getRandomName(headerCellsNames),\r\n        rowSpan: 4\r\n      })\r\n    );\r\n    i++;\r\n  }\r\n\r\n  let bottomCellsNumber = 0;\r\n\r\n  headerData = headerData.map((row, rowIndex) =>\r\n    row.map((cell) => {\r\n      if (\r\n        rowIndex === rowLength - 1 ||\r\n        (cell.rowSpan && cell.rowSpan + rowIndex === rowLength)\r\n      ) {\r\n        bottomCellsNumber++;\r\n        return {\r\n          ...cell,\r\n          touchHeaderBottom: true,\r\n          id: uuid()\r\n        };\r\n      }\r\n      return { ...cell, id: uuid() };\r\n    })\r\n  );\r\n\r\n  return {\r\n    headerData: headerData,\r\n    bottomCellsNumber,\r\n  };\r\n};\r\n","import {\n  Paper,\n  Table,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow\n} from \"@mui/material\";\nimport { getHeaderData } from \"./utils\";\nimport { UnicHeaderCell } from \"./models\";\nimport {\n  useMemo,\n  useState,\n  useRef,\n  MutableRefObject,\n  UIEvent,\n  useCallback,\n  memo\n} from \"react\";\nimport { useVirtual } from \"react-virtual\";\nimport { makeStyles } from \"@mui/styles\";\n\nconst useStyles = makeStyles({\n  app: {\n    fontFamily: 'sans-serif',\n    textAlign: 'center',\n    height: '100%',\n    boxSizing: 'border-box',\n  },\n  paper: {\n    maxWidth: '100%',\n    height: '90%',\n    padding: 16,\n  },\n  tableContainer: {\n    overflow: 'hidden !important',\n  },\n  container: {\n    width: '100%',\n  },\n  bodyContainer: {\n    width: '100%',\n    overflow: 'auto !important',\n  },\n  cell: {\n    border: \"1px solid black\",\n  }\n});\n\ntype MaybeDiv = HTMLDivElement | null;\n\ninterface CustomCellProps {\n  cell: UnicHeaderCell;\n}\n\nconst CustomCell = (props: CustomCellProps) => {\n  const { cell } = props;\n  return (\n    <TableCell\n      style={{ border: \"1px solid black\" }}\n      colSpan={cell.colspan}\n      rowSpan={cell.rowSpan}\n    >\n      <div\n        style={{\n          width: cell.touchHeaderBottom ? 150 - 34 : \"auto\"\n        }}\n      >\n        {cell.stringValue}\n      </div>\n    </TableCell>\n  );\n};\n\ninterface TableHeaderProps {\n  selfRef: MutableRefObject<MaybeDiv>;\n  bodyRef: MutableRefObject<MaybeDiv>;\n  headerData: UnicHeaderCell[][];\n  handleScroll: (\n    event: UIEvent<HTMLDivElement, globalThis.UIEvent>,\n    scrollRecipient: MutableRefObject<MaybeDiv>\n  ) => void | null;\n}\n\nconst TableHeader = memo((props: TableHeaderProps) => {\n  const { selfRef, bodyRef, headerData, handleScroll } = props;\n\n  const classes = useStyles();\n\n  return (\n    <TableContainer\n      className={classes.tableContainer}\n      ref={selfRef}\n      onScroll={(e) => handleScroll(e, bodyRef)}\n    >\n      <Table>\n        <TableHead>\n          {headerData.map((row, rowIndex) => (\n            <TableRow key={`${rowIndex}`}>\n              {row.map((cell) => (\n                <CustomCell cell={cell} key={cell.id} />\n              ))}\n            </TableRow>\n          ))}\n        </TableHead>\n      </Table>\n    </TableContainer>\n  );\n});\n\nexport default function App() {\n  const { headerData, bottomCellsNumber } = useMemo(\n    () => getHeaderData(60),\n    []\n  );\n  const headerRef = useRef<MaybeDiv>(null);\n  const bodyRef = useRef<MaybeDiv>(null);\n  const containerRef = useRef<MaybeDiv>(null);\n\n  const [cellsWidth, setCellsWidth] = useState(\n    Array.from({ length: bottomCellsNumber }, () => 147)\n  );\n\n  const handleScroll = useCallback(\n    (event: UIEvent<HTMLDivElement, globalThis.UIEvent>, scrollRecipient: MutableRefObject<MaybeDiv>) =>\n      scrollRecipient.current &&\n      scrollRecipient.current.scrollTo({ left: event.currentTarget.scrollLeft }),\n    []\n  );\n\n  const columnVirtualizer = useVirtual({\n    horizontal: true,\n    size: bottomCellsNumber,\n    estimateSize: useCallback((i) => cellsWidth[i], [cellsWidth]),\n    parentRef: bodyRef\n  });\n\n  const classes = useStyles();\n\n  return (\n    <div className={classes.app}>\n      <Paper id={classes.paper}>\n        <div ref={containerRef} className={classes.container}>\n          <TableHeader\n            headerData={headerData}\n            selfRef={headerRef}\n            bodyRef={bodyRef}\n            handleScroll={handleScroll}\n          />\n          <div\n            id={classes.bodyContainer}\n            ref={bodyRef}\n            onScroll={(e) => handleScroll(e, headerRef)}\n            style={{ height: 500 }}\n          >\n            {Array.from({ length: 10 }, (_, i) => (\n              <div\n                key={`${i}`}\n                style={{\n                  position: \"relative\",\n                  width: `${columnVirtualizer.totalSize}px`,\n                  height: 30\n                }}\n              >\n                {columnVirtualizer.virtualItems.map((virtualColumn, i) => (\n                  <div\n                    key={virtualColumn.index}\n                    ref={virtualColumn.measureRef}\n                    style={{\n                      position: \"absolute\",\n                      top: 0,\n                      left: 0,\n                      height: \"100%\",\n                      minWidth: cellsWidth[i],\n                      border: \"1px solid black\",\n                      transform: `translateX(${virtualColumn.start}px)`\n                    }}\n                  >\n                    {virtualColumn.index}\n                  </div>\n                ))}\n              </div>\n            ))}\n          </div>\n        </div>\n      </Paper>\n    </div>\n  );\n}\n","import { render } from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nrootElement?.setAttribute(\"style\", \"height: 100%;\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}